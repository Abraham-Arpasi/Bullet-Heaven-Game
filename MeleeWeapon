using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MeleeWeapon : Weapon
{
    enum State
    {
        Idle,
        Attack
    }

    private State state;

    [Header("Elements")]
    [SerializeField] private Transform hitBoxTransform;
    [SerializeField] private BoxCollider2D hitBoxCollider;
    [SerializeField] private float hitBoxRadius;
    private List<Enemy> damagedEnemies = new List<Enemy>();

    // Start is called before the first frame update
    void Start()
    {
        state = State.Idle;
    }

    // Update is called once per frame
    void Update()
    {
        switch (state)
        {
            case State.Idle:
                AutoAim();
                break;

            case State.Attack:
                Attacking();
                break;
        }
    }

    private void AutoAim()
    {
        Enemy closestEnemy = GetClosestEnemy();

        Vector2 targetUpVector = Vector3.up;

        if (closestEnemy != null)
        {
            targetUpVector = (closestEnemy.transform.position - transform.position).normalized;
            transform.up = targetUpVector;
            ManageAttackTimer();
        }

        transform.up = Vector3.Lerp(transform.up, targetUpVector, Time.deltaTime * aimLerp);
        AttackTimer();
    }

    private void ManageAttackTimer()
    {
        if (attackTimer >= attackDelay)
        {
            attackTimer = 0;
            StartAttack();
        }
    }

    private void AttackTimer()
    {
        attackTimer += Time.deltaTime;
    }

    private void StartAttack()
    {
        anim.Play("Attack");
        state = State.Attack;

        damagedEnemies.Clear();

        anim.speed = 1f / attackDelay;
    }

    private void Attacking()
    {
        Attack();
    }

    private void StopAttack()
    {
        state = State.Idle;
        damagedEnemies.Clear();
    }

    private void Attack()
    {
        // Collider2D[] enemies = Physics2D.OverlapCircleAll(hitBoxTransform.position, hitBoxRadius, enemyMask);
        Collider2D[] enemies = Physics2D.OverlapBoxAll(hitBoxTransform.position, hitBoxCollider.bounds.size, hitBoxTransform.localEulerAngles.z, enemyMask);

        for (int i = 0; i < enemies.Length; i++)
        {
            Enemy enemy = enemies[i].GetComponent<Enemy>();

            if (!damagedEnemies.Contains(enemy))
            {
                int damage = GetDamage(out bool isCriticalHit);

                enemy.TakeDamage(damage);
                damagedEnemies.Add(enemy);
            }

        }
    }

    private void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(hitBoxTransform.position, hitBoxRadius);
    }
}
