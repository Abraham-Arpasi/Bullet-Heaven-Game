using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D), typeof(Collider2D))]
public class Bullet : MonoBehaviour
{
    [Header("Elements")]
    private Rigidbody2D rig;
    private RangeEnemyAttack rangeEnemyAttack;
    private Collider2D collider;
    private RangeWeapon rangeWeapon;

    [Header("Settings")]
    private int damage;
    private bool isCriticalHit;
    [SerializeField] private float moveSpeed;
    [SerializeField] private LayerMask enemyMask;
    private Enemy target;

    private void Awake()
    {
        rig = GetComponent<Rigidbody2D>();
        collider = GetComponent<Collider2D>();

        StartCoroutine(ReleaseCoroutine());
    }

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    IEnumerator ReleaseCoroutine()
    {
        yield return new WaitForSeconds(5);

        rangeWeapon.ReleaseBullet(this);
    }

    public void Configure(RangeWeapon rangeWeapon)
    {
        this.rangeWeapon = rangeWeapon;
    }

    public void Shoot(int damage, Vector2 direction, bool isCriticalHit)
    {
        this.damage = damage;
        this.isCriticalHit = isCriticalHit;

        transform.right = direction;
        rig.velocity = direction * moveSpeed;
    }

    public void Reload()
    {
        target = null;

        rig.velocity = Vector2.zero;
        this.collider.enabled = true;
    }

    private void OnTriggerEnter2D(Collider2D collider)
    {
        if (target != null)
            return;

       if(IsInLayerMask(collider.gameObject.layer, enemyMask))
        {
            target = collider.GetComponent<Enemy>();
            StopCoroutine(ReleaseCoroutine());
            
            Attack(target);
            rangeWeapon.ReleaseBullet(this);
        } 
    }

    private void Attack(Enemy enemy)
    {
        enemy.TakeDamage(damage, isCriticalHit);
    }

    private bool IsInLayerMask(int layer, LayerMask layerMask)
    {
        return (layerMask.value & (1 << layer)) != 0;
    }

}
