using System;
using TMPro;
using UnityEngine;

public abstract class Enemy : MonoBehaviour
{
    [Header("Components")]
    protected EnemyMovement movement;

    [Header("Health")]
    [SerializeField] protected int maxHealth;
    protected int health;
    [SerializeField] protected TextMeshPro healthText;

    [Header("Elements")]
    protected Player player;

    [Header("Spawn Sequene")]
    [SerializeField] protected SpriteRenderer enemyRenderer;
    [SerializeField] protected SpriteRenderer spawnIndicator;
    protected bool hasSpawned;

    [Header("Attack")]
    [SerializeField] protected float playerDetectionRadius;

    [Header("Effects")]
    [SerializeField] protected ParticleSystem enemyBloodParticles;

    [Header("Actions")]
    protected static Action<int, Vector2> onDamageTaken;

    // Start is called before the first frame update
    protected virtual void Start()
    {
        health = maxHealth;
        healthText.text = health.ToString();

        movement = GetComponent<EnemyMovement>();

        player = FindFirstObjectByType<Player>();

        if (player == null)
        {
            Debug.LogWarning("no player found, auto");
            Destroy(gameObject);
        }

        StartSpawnSequence();
    }

    private void StartSpawnSequence()
    {
        SetRendererVisibility(false);

        Vector3 targetScale = spawnIndicator.transform.localScale * 1.2f;
        //scales the circle indicator 4 times in a loop down and up and after its done spawns the enemy.
        LeanTween.scale(spawnIndicator.gameObject, targetScale, 0.3f)
            .setLoopPingPong(4)
            .setOnComplete(SpawnSequenceCompleted);
    }

    private void SpawnSequenceCompleted()
    {
        SetRendererVisibility(true);
        hasSpawned = true;

        movement.StorePlayer(player);
    }

    private void SetRendererVisibility(bool visibility)
    {
        enemyRenderer.enabled = visibility;
        spawnIndicator.enabled = !visibility;
    }

    // Update is called once per frame
    protected bool CanAttack()
    {
        return enemyRenderer.enabled;
    }

    public void TakeDamage(int damage)
    {
        int realDamage = Mathf.Min(damage, health);
        health -= realDamage;

        healthText.text = health.ToString();

        onDamageTaken?.Invoke(damage, transform.position);

        if (health <= 0)
            EnemyDead();
    }

    private void EnemyDead()
    {
        enemyBloodParticles.transform.SetParent(null);
        enemyBloodParticles.Play();

        Destroy(gameObject);
    }

}
