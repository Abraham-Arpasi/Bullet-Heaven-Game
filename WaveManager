using NaughtyAttributes;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WaveManager : MonoBehaviour
{
    [Header("Elements")]
    [SerializeField] private List<BoxCollider2D> spawners = new List<BoxCollider2D>();

    [Header("Settings")]
    [SerializeField] private float waveDuration;
    private float timer;
    private bool isTimerOn;
    private int currentWaveIndex;

    [Header("Waves")]
    [SerializeField] private Wave[] waves;
    private List<float> localCounters = new List<float>();

    // Start is called before the first frame update
    void Start()
    {
        StartWave(currentWaveIndex);
    }

    // Update is called once per frame
    void Update()
    {
        if (!isTimerOn)
            return;

        if (timer < waveDuration)
        {
            ManageCurrentWave();
        }
        else
            StartWaveTransition();
    }

    private void StartWave(int waveIndex)
    {
        localCounters.Clear();
        foreach (WaveSegment segment in waves[waveIndex].segments)
            localCounters.Add(1);

        timer = 0;
        isTimerOn = true;
    }

    private void ManageCurrentWave()
    {
        Wave currentWave = waves[currentWaveIndex];

        for (int i = 0; i < currentWave.segments.Count; i++)
        {
            WaveSegment segment = currentWave.segments[i];

            float tStart = segment.tStartEnd.x / 100 * waveDuration;
            float tEnd = segment.tStartEnd.y / 100 * waveDuration;

            if (timer < tStart || timer > tEnd)
                continue;

            float timeSinceSegmentStart = timer - tStart;

            float spawnDelay = 1f / segment.spawnFrequency;

            if(timeSinceSegmentStart / spawnDelay > localCounters[i])
            {
                Instantiate(segment.prefab, GetSpawnPosition(), Quaternion.identity, transform);
                localCounters[i]++;
            }
        }

        timer += Time.deltaTime;
    }

    private void StartWaveTransition()
    {
        isTimerOn = false;

        DefeatAllEnemies();

        currentWaveIndex++;

        if (currentWaveIndex >= waves.Length)
            Debug.Log("Wave completed");
        else
            StartWave(currentWaveIndex);
    }

    private void DefeatAllEnemies()
    {
        transform.Clear();
    }

    private Vector2 GetSpawnPosition()
    {
        BoxCollider2D spawner = spawners[Random.Range(0, spawners.Count)];

        Bounds bounds = spawner.bounds;

        float x = Random.Range(bounds.min.x, bounds.max.x);
        float y = Random.Range(bounds.min.y, bounds.max.y);

        return new Vector2(x, y);
    }
}

    [System.Serializable]
    public struct Wave
    {
        public string name;
        public List<WaveSegment> segments;
    }

    [System.Serializable]
    public struct WaveSegment
    {
        [MinMaxSlider(0, 100)] public Vector2 tStartEnd;
        public float spawnFrequency;
        public GameObject prefab;
    }
