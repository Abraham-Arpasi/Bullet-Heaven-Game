using UnityEngine;

[RequireComponent(typeof(EnemyMovement))]
public class MeleeEnemy : Enemy
{
    [Header("Attack")]
    [SerializeField] private int damage;
    [SerializeField] private float attackFrequency;
    private float attackDelay;
    private float attackTimer;

    [Header("Range Enemy")]
    [SerializeField] private bool isRangeEnemy;
    [SerializeField] private float rangePlayerDetectionRadius;

    // Start is called before the first frame update
    protected override void Start()
    {
        base.Start();

        attackDelay = 1f / attackFrequency;
    }

    // Update is called once per frame
    void Update()
    {
        if (!CanAttack())
            return;

        if (attackTimer >= attackDelay)
            TryAttack();
        else
            Wait();

        movement.FollowPlayer();
    }

    private void Wait()
    {
        attackTimer += Time.deltaTime;
    }

    private void TryAttack()
    {
        float distanceToPlayer = Vector2.Distance(transform.position, player.transform.position);

        if (!isRangeEnemy)
        {
            if (distanceToPlayer <= playerDetectionRadius)
                Attack();
        }
        else
        {
            if (distanceToPlayer <= rangePlayerDetectionRadius)
                Attack();
        }
    }

    private void Attack()
    {
        Debug.Log("Dealing " + damage + " damage to the player");
        attackTimer = 0;

        if (!isRangeEnemy)
            player.TakeDamage(damage);
        else
            Debug.Log("Shoot");
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, playerDetectionRadius);

        Gizmos.color = Color.magenta;
        Gizmos.DrawWireSphere(transform.position, rangePlayerDetectionRadius);
    }
}
